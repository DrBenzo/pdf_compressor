import os
import subprocess
from pathlib import Path
from typing import List, Tuple
from datetime import datetime
from concurrent.futures import ProcessPoolExecutor, as_completed
from functools import partial
from tqdm import tqdm

# ANSI-—Ü–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
class Color:
    GREEN = '\033[92m'
    RED = '\033[91m'
    CYAN = '\033[96m'
    YELLOW = '\033[93m'
    RESET = '\033[0m'

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
class Stats:
    total = 0
    success = 0
    failed = 0
    errors: List[str] = []
    original_size = 0
    compressed_size = 0

def prompt_directory(prompt_text: str) -> Path:
    while True:
        path = input(f"{prompt_text}: ").strip('" ').strip()
        if os.path.isdir(path):
            return Path(path)
        else:
            print(f"{Color.RED}‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {path}{Color.RESET}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")

def prompt_quality() -> str:
    print("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∂–∞—Ç–∏—è:")
    print("1. screen  (–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –≤—ã—Å–æ–∫–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è)")
    print("2. ebook   (—Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ–º–ø—Ä–æ–º–∏—Å—Å)")
    print("3. printer (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —É–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è)")
    print("4. prepress (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è)")
    print("5. default  (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): ").strip()
    return {
        '1': '/screen',
        '2': '/ebook',
        '3': '/printer',
        '4': '/prepress',
        '5': '/default'
    }.get(choice, '/ebook')

def compress_pdf(input_path, output_path, quality) -> Tuple[bool, int, int, str]:
    output_path.parent.mkdir(parents=True, exist_ok=True)

    gs_command = [
        "gswin64c",
        "-sDEVICE=pdfwrite",
        "-dCompatibilityLevel=1.4",
        f"-dPDFSETTINGS={quality}",
        "-dNOPAUSE",
        "-dQUIET",
        "-dBATCH",
        f"-sOutputFile={str(output_path)}",
        str(input_path)
    ]

    try:
        original_size = os.path.getsize(input_path)
        subprocess.run(gs_command, check=True)
        compressed_size = os.path.getsize(output_path)
        return (True, original_size, compressed_size, str(input_path))
    except Exception:
        return (False, 0, 0, str(input_path))

def find_all_pdfs(root_dir: Path) -> List[Path]:
    return [Path(os.path.join(root, file))
            for root, _, files in os.walk(root_dir)
            for file in files if file.lower().endswith(".pdf")]

def process_all(input_dir, output_dir, quality):
    pdf_files = find_all_pdfs(input_dir)
    Stats.total = len(pdf_files)
    print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ PDF-—Ñ–∞–π–ª–æ–≤: {Stats.total}\n")

    tasks = []
    for input_file in pdf_files:
        relative_path = input_file.relative_to(input_dir)
        output_file = output_dir / relative_path
        tasks.append((input_file, output_file))

    with ProcessPoolExecutor() as executor:
        futures = {
            executor.submit(compress_pdf, inp, out, quality): (inp, out)
            for inp, out in tasks
        }
        for future in tqdm(as_completed(futures), total=len(futures), desc="üì¶ –°–∂–∞—Ç–∏–µ PDF", ncols=80):
            success, orig, comp, path = future.result()
            if success:
                Stats.success += 1
                Stats.original_size += orig
                Stats.compressed_size += comp
            else:
                Stats.failed += 1
                Stats.errors.append(path)

    print("\n" + "="*40)
    print(f"{Color.YELLOW}üìä –°–≤–æ–¥–∫–∞:{Color.RESET}")
    print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {Stats.total}")
    print(f"{Color.GREEN}–£—Å–ø–µ—à–Ω–æ:         {Stats.success}{Color.RESET}")
    print(f"{Color.RED}–° –æ—à–∏–±–∫–∞–º–∏:      {Stats.failed}{Color.RESET}")
    if Stats.total > 0:
        saved = Stats.original_size - Stats.compressed_size
        ratio = (saved / Stats.original_size) * 100 if Stats.original_size else 0
        print(f"\nüìâ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–æ:   {Stats.original_size / (1024*1024):.2f} MB")
        print(f"üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ: {Stats.compressed_size / (1024*1024):.2f} MB")
        print(f"üíæ –≠–∫–æ–Ω–æ–º–∏—è: {saved / (1024*1024):.2f} MB ({ratio:.1f}%)")
    if Stats.failed > 0:
        print("\nüö´ –û—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–∞—Ö:")
        for err in Stats.errors:
            print(f"  - {err}")
    print("="*40 + "\n")

def check_ghostscript():
    try:
        result = subprocess.run([
            "gswin64c", "--version"],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        print(f"{Color.GREEN}‚úî Ghostscript –Ω–∞–π–¥–µ–Ω. –í–µ—Ä—Å–∏—è: {result.stdout.strip()}{Color.RESET}\n")
    except FileNotFoundError:
        print(f"{Color.RED}‚ùå Ghostscript –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH.{Color.RESET}")
        exit(1)
    except subprocess.CalledProcessError as e:
        print(f"{Color.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Ghostscript:{Color.RESET} {e.stderr.strip()}")
        exit(1)

if __name__ == "__main__":
    print("üìÅ –£—Ç–∏–ª–∏—Ç–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è PDF —á–µ—Ä–µ–∑ Ghostscript\n")
    check_ghostscript()
    input_root = prompt_directory("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –í–•–û–î–ù–û–ô –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    output_root = prompt_directory("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –í–´–•–û–î–ù–û–ô –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    quality = prompt_quality()
    start = datetime.now()
    process_all(input_root, output_root, quality)
    duration = datetime.now() - start
    print(f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
    print(f"üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã!")
